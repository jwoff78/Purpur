From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jason Penilla <11360596+jpenilla@users.noreply.github.com>
Date: Mon, 14 Sep 2020 10:09:05 -0700
Subject: [PATCH] Despawn rate config options per projectile type

This patch's implementation has been removed in favor of Pufferfish's entity-timeouts.
The config remains for migration purposes.

diff --git a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
index 34eb43ca2bf446504c372f98dfbe6dbfd0a81369..6fe19138cb4da25c6e0effde3339c18b14a2220c 100644
--- a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
+++ b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
@@ -121,7 +121,23 @@ public class PufferfishConfig {
 			config.setComment(key, String.join("\n", comment), CommentType.BLOCK);
 		}
 	}
-	
+
+	// Purpur start
+	public static int getRawInt(String key, int def) {
+		return config.getInt(key, def);
+	}
+	public static void setInt(String key, int value) {
+		config.set(key, value);
+	}
+	public static void save() {
+		try {
+			config.save(new File("pufferfish.yml"));
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
+	// Purpur end
+
 	private static boolean getBoolean(String key, boolean defaultValue, String... comment) {
 		return getBoolean(key, null, defaultValue, comment);
 	}
diff --git a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
index 10be99da087706094e93144252ea666dc1238979..79afd91b958d111468901d49fe85565277839891 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
@@ -292,6 +292,39 @@ public class PurpurWorldConfig {
         totemOfUndyingWorksInInventory = getBoolean("gameplay-mechanics.player.totem-of-undying-works-in-inventory", totemOfUndyingWorksInInventory);
     }
 
+    private static boolean projectileDespawnRateSettingsMigrated = false;
+    private void projectileDespawnRateSettings() {
+        if (PurpurConfig.version < 28 && !projectileDespawnRateSettingsMigrated) {
+            migrateProjectileDespawnRateSettings(EntityType.DRAGON_FIREBALL);
+            migrateProjectileDespawnRateSettings(EntityType.EGG);
+            migrateProjectileDespawnRateSettings(EntityType.ENDER_PEARL);
+            migrateProjectileDespawnRateSettings(EntityType.EXPERIENCE_BOTTLE);
+            migrateProjectileDespawnRateSettings(EntityType.FIREWORK_ROCKET);
+            migrateProjectileDespawnRateSettings(EntityType.FISHING_BOBBER);
+            migrateProjectileDespawnRateSettings(EntityType.FIREBALL);
+            migrateProjectileDespawnRateSettings(EntityType.LLAMA_SPIT);
+            migrateProjectileDespawnRateSettings(EntityType.POTION);
+            migrateProjectileDespawnRateSettings(EntityType.SHULKER_BULLET);
+            migrateProjectileDespawnRateSettings(EntityType.SMALL_FIREBALL);
+            migrateProjectileDespawnRateSettings(EntityType.SNOWBALL);
+            migrateProjectileDespawnRateSettings(EntityType.WITHER_SKULL);
+            PufferfishConfig.save();
+            set("gameplay-mechanics.projectile-despawn-rates", null);
+            // pufferfish's entity_timeout is a global config
+            // we only want to migrate values from the
+            // default world (first world loaded)
+            projectileDespawnRateSettingsMigrated = true;
+        }
+    }
+    private void migrateProjectileDespawnRateSettings(EntityType<?> type) {
+        String pufferName = "entity_timeouts." + type.id.toUpperCase(Locale.ROOT);
+        int value = getInt("gameplay-mechanics.projectile-despawn-rates." + type.id, -1);
+        if (value != -1 && PufferfishConfig.getRawInt(pufferName, -1) == -1) {
+            PufferfishConfig.setInt(pufferName, value);
+            type.ttl = value;
+        }
+    }
+
     public boolean silkTouchEnabled = false;
     public String silkTouchSpawnerName = "<reset><white>Spawner";
     public List<String> silkTouchSpawnerLore = new ArrayList<>();
